@page

@using LearnItAll.Models.Skillblueprints
@using Microsoft.AspNetCore.Mvc.Localization
@using System.Web

@inject IViewLocalizer Localizer
@model LearnItAll.Areas.Blueprints.Pages.CreateBlueprintModel
			

<ul id="root" class="list-group list-group-flush">

		<li  hx-boost="true"
                hx-target="this"
                hx-swap="outerHTML swap:1s"
				hx-indicator="#root-spinner"
                class="list-group-item">
                <div class="row">
                    <div class="col-sm-6">
    			    	<form asp-page-handler="Create" method="post" >
                            <div class="input-group ">
                            <div class="form-floating flex-grow-1">
    			    			<input id="root-input" autofocus asp-for=@Model.NewBlueprintModel.Name class="form-control" placeholder="Skill Name">
                                 <label for="root-input">Type the skill name and hit enter to create it</label>
                            </div>
    			    		<button type="submit" class="btn btn-primary">Create</button>
                            </div>
    			    	</form>
		            </div>
                    <div class="col-sm-6">
				            <div id="root-spinner" class="spinner-border htmx-indicator" role="status" aria-hidden="true"></div>
		            </div>
		        </div>

		</li>
</ul>

@section scripts {
    <script>
    htmx.on("htmx:afterRequest", function(evt) {
        var formThatTriggeredTheSubmit = evt.detail.elt;
        const input = formThatTriggeredTheSubmit.querySelector('input[name="AddPartModel.Name"]');
        input.value = '';
    });
    htmx.logAll();

    //https://htmx.org/docs/#modifying_swapping_behavior_with_events
    document.body.addEventListener('htmx:beforeSwap', function(evt) {
    if(evt.detail.xhr.status === 400){
        // alert the user when a 400 occurs (maybe use a nicer mechanism than alert())
        alert("Error: Could Not Find Resource");
    } else if(evt.detail.xhr.status === 422){
        // allow 422 responses to swap as we are using this as a signal that
        // a form was submitted with bad data and want to rerender with the
        // errors
        //
        // set isError to false to avoid error logging in console
        evt.detail.shouldSwap = true;
        evt.detail.isError = false;
    } 
});

// draggable content on inputs to create several new parts all at once
const inputTextToReceiveDraggableContent = "AddPartModel.Name";
const backgroundColorOfTextInput ="bg-secondary";
//https://jsfiddle.net/radonirinamaminiaina/zfnj5rv4/
 document.addEventListener("dragenter", function( event ) {
      // highlight potential drop target when the draggable element enters it
     if ( event.target.name == inputTextToReceiveDraggableContent ) {
        htmx.addClass(event.target, backgroundColorOfTextInput);

     }

  }, false);

  document.addEventListener("dragleave", function( event ) {
      // reset background of potential drop target when the draggable element leaves it
     if ( event.target.name == inputTextToReceiveDraggableContent ) {
        htmx.removeClass(event.target, backgroundColorOfTextInput);          
        event.target.style.height = "";
      }

  }, false);

document.addEventListener("drop", function( event ) {
    // prevent default action (open as link for some elements)
    event.preventDefault();
    // move dragged elem to the selected drop target
    if ( event.target.name == inputTextToReceiveDraggableContent ) {
        htmx.removeClass(event.target, backgroundColorOfTextInput);          
        let data = event.dataTransfer.getData('text/plain');
        const items = data.split('\r\n');
        const size = items.length;
        if(size > 1){
              const modal = document.getElementById("modal-"+event.target.id);
              let body = modal.querySelector('[name=modal-body]');
              const height =  size * 38;
              body.style.height = height + "px";
              let row = body.querySelector('#row1');
              row.id = "row_" + event.target.id;
              items.filter(v => v).forEach((element,index)  => {
                  let newRow = row.cloneNode(true);
                  htmx.removeClass(newRow, "d-none");
                  newRow.id = row.id +"_" + index;
                  let newPartName = newRow.querySelector("[name='"+inputTextToReceiveDraggableContent+"'");
                  newPartName.value = element;
                  row.parentNode.appendChild(newRow);
                  htmx.process(newRow);
              });
              const button = document.getElementById("open-modal-"+event.target.id);
              button.click();
        } else {
            event.target.value = data;
        }
        event.target.style.background = "";
        event.target.style.height = "";
    }
});

       
    </script>

}
