@page

@using LearnItAll.Models.Skillblueprints
@using Microsoft.AspNetCore.Mvc.Localization
@using System.Web

@inject IViewLocalizer Localizer
@model LearnItAll.Areas.Blueprints.Pages.CreateBlueprintModel
			

<ul id="root" class="list-group p-3">

		<li  hx-boost="true"
                hx-target="this"
                hx-swap="outerHTML settle:1s"
                class="list-group-item">
                <div id="fade-me-in" class="just-padding">
                    <div id="delete" class="list-group list-group-root well">
    			    	<form asp-page-handler="Create" method="post" >
    			    		<div class="input-group mb-3">
    			    				<input autofocus asp-for=@Model.NewBlueprintModel.Name class="form-control" placeholder="Skill Name" placeholder="Skill Name">
    			    		<button type="submit" class="btn btn-outline-secondary" style="font-size: 1.0rem; color: cornflowerblue;">+
    			    		</button>
    			    		</div>
    			    	</form>
		            </div>
		        </div>
		</li>
</ul>

@section scripts {
    <script>
    htmx.on("htmx:afterRequest", function(evt) {
        var formThatTriggeredTheSubmit = evt.detail.elt;
        const textAreaName = formThatTriggeredTheSubmit.querySelector('textarea[name="AddPartModel.Name"]');
        textAreaName.value = '';
        textAreaName.rows = "1";
        textAreaName.style.height='';
    });
    htmx.logAll();

    //https://htmx.org/docs/#modifying_swapping_behavior_with_events
    document.body.addEventListener('htmx:beforeSwap', function(evt) {
    if(evt.detail.xhr.status === 400){
        // alert the user when a 400 occurs (maybe use a nicer mechanism than alert())
        alert("Error: Could Not Find Resource");
    } else if(evt.detail.xhr.status === 422){
        // allow 422 responses to swap as we are using this as a signal that
        // a form was submitted with bad data and want to rerender with the
        // errors
        //
        // set isError to false to avoid error logging in console
        evt.detail.shouldSwap = true;
        evt.detail.isError = false;
    } 
});

//https://jsfiddle.net/radonirinamaminiaina/zfnj5rv4/
 document.addEventListener("dragenter", function( event ) {
      // highlight potential drop target when the draggable element enters it
     if ( event.target.type == "textarea" ) {
          event.target.style.background = "purple";
     }

  }, false);

  document.addEventListener("dragleave", function( event ) {
      // reset background of potential drop target when the draggable element leaves it
     if ( event.target.type == "textarea" ) {
          event.target.style.background = "";
          event.target.style.height = "";
      }

  }, false);

   document.addEventListener("drop", function( event ) {
      // prevent default action (open as link for some elements)
      event.preventDefault();
      // move dragged elem to the selected drop target
      if ( event.target.type == "textarea" ) {
          event.target.style.background = "";
         // dragged.parentNode.removeChild( dragged );
          event.target.value = event.dataTransfer.getData('text/plain');
          const items = event.target.value.split('\n').length;
          if(items > 1){
            const height =  items * 38;
            event.target.style.height = height + "px";
          }
      }
    
  }, false);
    </script>
}